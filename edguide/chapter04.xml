<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE bookinfo PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "general.ent">
  %general-entities;
]>

<chapter id="chapter04">
<title>Committing Changes - Policy</title>
<?dbhtml filename="chapter04.html" ?>


<sect1 id="ch04-introduction">
<title>Introduction</title>

<para>Here is a summary list of things to do before committing
changes:</para>

<itemizedlist>
<listitem><para>Test the instructions you are adding</para></listitem>
<listitem><para>Update <filename>index.xml</filename> with the new date
and the files containing updated entities if necessary.</para></listitem>
<listitem><para>Update
<filename>introduction/welcome/changelog.xml</filename></para></listitem>
<listitem><para>Update
<filename>introduction/welcome/credits.xml</filename></para></listitem>
<listitem><para>Check that all relevant files have been <userinput>cvs
add</userinput>'d or <userinput>remove</userinput>'d.</para></listitem>
<listitem><para>Check that the book renders properly.</para></listitem>
<listitem><para>Commit it!</para></listitem>
<listitem><para>Update bugzilla to reflect the changes</para></listitem>
</itemizedlist>


<sect2 id="ch04-test">
<title>Test the instructions</title>

<para>This may seem <emphasis>really</emphasis> obvious but
<filename>&lt;confession mode&gt;</filename> I have actually made small
changes without testing them before, and had to change them (in one case
twice) very quickly when someone noticed.... &lt;/confession mode&gt;
So learn from my mistakes - check <emphasis>everything</emphasis></para>

</sect2>

<sect2 id="ch04-updateindex">
<title>Updating index.xml</title>

<sect2><title>Updating the date</title>
<para>The following elements should be updated whenever
<emphasis>any</emphasis> change (including small typo fixes) is made:
<screen>&lt;!ENTITY version "20020429"&gt;
&lt;!ENTITY releasedate "April 29th, 2002"&gt;</screen>
The two dates <emphasis>must</emphasis> correspond and the first is in
the format YYYYMMDD.</para></sect2>

<sect2><title>Adding / updating entities</title>
<para>Package entities are now stored in individual
<filename>.ent</filename> files throughout the BLFS CVS tree.  You need
to find the relevant ones and update them.  Entities should be on one line 
(even if this requires wrapping because of the length).</para>
</sect2>

</sect2>

<sect2 id="ch04-updatechangelog">
<title>Update introduction/welcome/changelog.xml</title>

<para>Changelog updates should <emphasis>always</emphasis> be provided
with the exception of small typo fixes.  You don't need to add "fixed
small typo in XXX" to the changelog otherwise it'd grow like
topsy.</para>

<para>Changelog updates need to be in a standard format.  Here is an
example:
<screen>&lt;listitem&gt;&lt;para&gt;April 29th, 2002 [markh]: Chapter 06
- Add DHCP_STOP variable to DHCP scripts.&lt;/para&gt;&lt;/listitem&gt;</screen>
Replace <userinput>[markh]</userinput> with your shadowfax login
name.</para>

<para>Changelog entries are always added to the top of the file, just
beneath the &lt;itemizedlist&gt; tag.  They are cleaned out after
major releases and always divided by the editor (me!) after each
release.  If you don't understand this, look at the LFS changelog for
release 3.3 to see what I mean.</para>

</sect2>

<sect2 id="ch04-checkfiles">
<title>Check all relevant files have been added and removed</title>

<para>If you are adding files, you need to have ran a <userinput>cvs
add</userinput> command on each of them (something like <userinput>cvs
add mypackage*.xml</userinput> often does the trick.  A good
trick if you've only added files (not taken any away) is to run a
<userinput>cvs up</userinput> which will give an output something like
this:
<screen>mark:~/LFS/BLFS$ cvs up
? temp/thisfileneedstobeadded
cvs server: Updating .
cvs server: Updating appendices
[snip]
cvs server: Updating postlfs  
cvs server: Updating preface
cvs server: Updating temp
A temp/thisfileadded
R temp/thisfilehasbeendeleted
M temp/thisfilehasbeenmodified
U temp/thisfilehasbeenupdatedfromtheserver
RCS file: /home/cvsroot/BLFS/temp/thisfilehasconflicts,v
retrieving revision 1.1
retrieving revision 1.2
Merging differences between 1.1 and 1.2 into thisfilehasconflicts
rcsmerge: warning: conflicts during merge
cvs server: conflicts found in temp/thisfilehasconflicts
C temp/thisfilehasconflicts
RCS file: /home/cvsroot/BLFS/temp/thisfilehashadchangesmergedin,v
retrieving revision 1.1
retrieving revision 1.2
Merging differences between 1.1 and 1.2 into
thisfilehashadchangesmergedin
M temp/thisfilehashadchangesmergedin
cvs server: Updating template</screen>
[snip]'s added by me!  If you look at the first column, you will see
various different letters which all mean different things.</para>



<para><userinput>?</userinput>: This is what CVS reports when it doesn't
know what to do with a file.  Generally it means that you've forgotten
to <userinput>cvs add</userinput> a file to the repository but can also
just be temporary editor files which CVS doesn't know what to do with.
If it's just temporary files, don't worry, it won't try and commit them
when you do a <userinput>cvs ci</userinput> because you haven't added
them.  Instead it'll just leave them alone.</para>

<para><userinput>A</userinput>: This is a file which has been added to
CVS using <userinput>cvs add</userinput> but has not yet been committed.
When you're ready to commit it, simply do a <userinput>cvs
ci</userinput> on it (and don't forget that nearly all cvs operations
can be
performed on as many files at once as you like; indeed, if you specify
no file, it'll either give you an error (if it doesn't make sense; like
with <userinput>cvs add</userinput> or <userinput>delete</userinput>) or
simply perform the action on all files from that directory downwards in
the tree; for example with <userinput>cvs ci</userinput>).</para>

<para><userinput>R</userinput>: This is a file which has been removed
from CVS using <userinput>cvs delete</userinput> but has not yet been
committed.
The equivalent of 'A' for added files.</para>

<para><userinput>M</userinput>: This is a file which has been modified
in your local repository and hasn't been checked in.  If there have also
been changes in the remote copy, it means that CVS successfully merged
them.  Even so, if (as in the file thisfilehashadchangesmergedin above)
changes have been automatically merged, you should look them over to
check that they make sense.  Then, when you're ready, commit.</para>

<para><userinput>U</userinput>: This is a file which was unchanged
locally but changed remotely.  The changes were successfully applied to
your local copy.  You don't need to commit on this message as you
haven't made any local changes.</para>

<para><userinput>C</userinput>: This is the horrible one.  It means that
you have made local changes but at the same time someone has made remote
changes which can't be automatically merged with yours.  You will have
to go through the files (usually named with .'s and version numbers) and
sort the conflict out yourself.  Due to the nature of the BLFS book,
this doesn't happen very often (well up to now never because I was the
only one committing but even with the LFS book I've only known it happen
a couple of times).  If this happens to you, good luck and have
fun.</para>

<para>Once you know why you're getting each symbol, and they're all
correct, you can proceed to the next step.</para>

</sect2>

<sect2 id="ch04-checkrender">
<title>Check that the book renders properly</title>

<para>Before commiting any changes, it's important to check that you
have all the syntax correct and that the book can actually pass through
<userinput>openjade</userinput> without making it belch.  Instructions
on how to render the book can be found in the CVS rep in the
<filename>INSTALL</filename> and <filename>README</filename> files.
It's generally best to have a script which automatically does it all for
you.  I'll give my script here (no comments on the coding standard
please) which I have in <filename>~/scripts</filename> as
<filename>updatehtmlb</filename>.  <filename>~/scripts</filename> is
then on my path, making an update simply a quick command away:
<screen>#!/bin/sh

# This script is licensed under the usual BSD rules which LFS projects
# generally follow.  I accept no responsibility if it causes any damage
# including, but not limited to, blowing up household pets.
# Mark Hymers &lt;markh@linuxfromscratch.org&gt;

BLFS_XML=/home/mark/LFS/BLFS
BLFS_HTML=/home/mark/LFS/htmlb

if [ ! -d $BLFS_XML ]
  then
    echo "$BLFS_XML doesn't exist"
  else
    echo "Updating $BLFS_HTML"

    if [ -d $BLFS_HTML ]
    then
        cd $BLFS_HTML &amp;&amp; rm -fr *
    else
      mkdir $BLFS_HTML &amp;&amp; cd $BLFS_HTML
    fi

    mkdir introduction postlfs general connect basicnet server \
          content x kde gnome xsoft multimedia pst preface \
          appendices other

    /usr/bin/openjade -t sgml \
      -d /usr/share/dsssl/docbook/html/blfs.dsl \
      /usr/share/dsssl/docbook/dtds/decls/xml.dcl \
      $BLFS_XML/index.xml

    cd other

    /usr/bin/openjade -t sgml \
      -V nochunks \
      -d /usr/share/dsssl/docbook/html/lfs.dsl \
      /usr/share/dsssl/docbook/dtds/decls/xml.dcl \
      $BLFS_XML/index.xml > nochunks.html

#	
#   Note that you can leave out this section if you don't have htmltidy
#   installed (http://tidy.sf.net)
#

    for i in `find ./ -name "*.html"`
    do
    tidy -q -latin1 -m $i
    cp $i $i.bak
    sed '4i\
&lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-15"&gt;' $i.bak &gt; $i
    rm -f $i.bak
    done

#
#   End of HTML Tidy section
#

    htmldoc --book --firstpage p1 -v -t ps3 -f blfs.ps nochunks.html
    htmldoc --book --firstpage p1 -v -t pdf13 -f blfs.pdf nochunks.html
    lynx -dump nochunks.html > blfs.txt

fi</screen></para>

</sect2>

<sect2 id="ch04-commit">
<title>Commit it!</title>

<para>Once you are sure that everything renders and that you know which
files you wish to commit, you're ready.  At this point, I'd like to say
that it is nicer to get a set of commit emails each of which is a single
change.  So for example, if you're adding two packages, try and commit
them using two seperate commit commands.  This isn't totally necessary
but it does make it easier to look through the cvs commit emails (which
go to <userinput>blfs-book</userinput> and makes it easier to write
comments.</para>

<para>Before you actually commit, spend two seconds thinking about the
comment you are going to add.  As mentioned in the section on CVS
commands, comments should <emphasis>always</emphasis> be used when
commiting to CVS.  Even if the comment is just 'small typo fix', that'll
do.  Other usual comments are 'update to package-x.y.z' or 'add new
section BLAH'.</para>

<para>To commit, you use the <userinput>cvs commit</userinput> or
<userinput>cvs ci</userinput> command.  A good example of a commit
command could be:
<screen><userinput>cvs ci -m "add new package baldrick" index.xml \
introduction/welcome/changelog.xml introduction/welcome/credits.xml \
postlfs/postlfs.xml postlfs/config/baldrick/baldrick*.xml</userinput></screen>
If you have only made the changes regarding this package to your tree,
then you can save time by simply running:
<screen><userinput>cvs ci -m "add new package
baldrick"</userinput></screen>
from the root of your local BLFS sandbox.  The first command is more
useful when you've modified files you don't want to commit at this
time.</para>

</sect2>

<sect2 id="ch04-bugzilla">
<title>Update bugzilla</title>

<para>The final part of updating the book is to update bugzilla.  I used
to be terrible at doing this but even I'm getting slightly more
disciplined these days!  This is usually as easy as going to BLFS
Bugzilla (<ulink url="&blfs-bugzilla;"/>), going to the bug and
choosing Resolve bug, changing resolution to FIXED.  Note that you
should <emphasis>not</emphasis> then go back and CLOSE the bug.  The
person who closes the bug should be a different editor who has tested
that what the bug is about has been fixed.  Basically, it's our QA
process.</para>

<para>Having completed all of this, you can now go and have a rest.
Well done, thank you and goodnight.</para>

</sect2>
</sect1>

</chapter>

