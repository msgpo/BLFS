<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "general.ent">
  %general-entities;
]>

<chapter id="chapter04">
<chapterinfo>
<othername>$Author$</othername>
<date>$Date$</date>
</chapterinfo>
<title>Committing Changes - Policy</title>
<?dbhtml filename="chapter04.html" ?>


<section id="ch04-introduction">
<title>Introduction</title>

<para>Here is a summary list of things to do before committing
changes:</para>

<itemizedlist>
<listitem><para>Test the instructions you are adding</para></listitem>
<listitem><para>Update <filename>general.ent</filename> with the new date.</para></listitem>
<listitem><para>Update <filename>introduction/welcome/changelog.xml</filename></para></listitem>
<listitem><para>Check that all relevant files have been <userinput>svn add</userinput>ed or 
   <userinput>remove</userinput>ed.</para></listitem>
<listitem><para>Check that the book renders properly.</para></listitem>
<listitem><para>Commit it!</para></listitem>
<listitem><para>Update bugzilla to reflect the changes</para></listitem>
</itemizedlist>

</section>

<section id="ch04-test">
<title>Test the instructions</title>

<para>This may seem <emphasis>really</emphasis> obvious but
<filename>&lt;confession mode&gt;</filename> we have actually made small
changes without testing them before, and had to change them (in one case
twice) very quickly when someone noticed.... &lt;/confession mode&gt;
So learn from our mistakes - check <emphasis>everything</emphasis>.</para>

</section>

<section id="ch04-updategeneralent">
<title>Updating <filename>general.ent</filename></title>
<para>The <filename>general.ent</filename> contains entities that are used in multiple
xml files throughout the book.  Normally, it will contain version numbers of each
package as well as general information such as the book's version number and
release date.  When making an update, the day/month/year and releasedate entities should be
updated.  The version numbers of packages should be updated as appropriate.</para>


<section><title>Updating the date</title>
<para>The following elements should be updated whenever
<emphasis>any</emphasis> change (including small typo fixes) is made:
<screen>&lt;!ENTITY day "01"&gt;
&lt;!ENTITY month "08"&gt;
&lt;!ENTITY year "2005"&gt;
&lt;!ENTITY releasedate "August &amp;day;st, &amp;year"&gt;</screen>
The two dates <emphasis>must</emphasis> correspond.
</para>

</section>
</section>

<section id="ch04-updatechangelog">
<title>Update introduction/welcome/changelog.xml</title>

<para>Changelog updates should <emphasis>always</emphasis> be provided
with the exception of small typo fixes.  You don't need to add "fixed
small typo in XXX" to the changelog otherwise it'd grow like
topsy.</para>

<para>Changelog updates need to be in a standard format.  Here is an
example:
<screen>&lt;listitem&gt;&lt;para&gt;April 29th, 2002 [markh]: Chapter 06
- Add DHCP_STOP variable to DHCP scripts.&lt;/para&gt;&lt;/listitem&gt;</screen>
Replace <userinput>[markh]</userinput> with your belgarath userid.</para>

<para>Changelog entries are always added to the top of the file, just
beneath the &lt;itemizedlist&gt; tag.  They are cleaned out after
major releases and consolidated in the credits section.</para>

</section>

<section id="ch04-checkfiles">
<title>Check all relevant files have been added and removed</title>

<para>If you are adding files, you need to run a <userinput>svn
add</userinput> command on each of them (something like <userinput>svn
add mypackage*.xml</userinput> often does the trick.  In most cases you
will also need to do:

<screen>svn propset svn:keywords "LastChangedBy Date" &lt;filename&gt;</screen>

This command tells svn to substitute the current timestamp and author name
into the file where it see the construct:

<screen>$LastChangedBy$
$Date$</screen>

</para>


<para>A good method to use if you've only added files (not taken any away) is
to run a <userinput>svn status</userinput> which will give an output something
like this:

<screen>mark:~/LFS/BLFS$ svn status --show-updates
?                   .chapter04.xml.swp
?                   goTidy
MM           2539   chapter01.xml
MM           2539   chapter02.xml
MM     *     2539   chapter03.xml
MM           2539   chapter04.xml
C            2539   chapter05.xml
MM           2539   chapter06.xml
M            2539   general.ent
MM           2539   preface.xml
MM           2539   bookinfo.xml
 M           2539   index.xml
A               0   edguide.xsl
D            2539   stylesheets
D            2539   stylesheets/edguide.xsl
M            2539   Makefile
Status against revision:   2539</screen>

If you look at the first column, you will see
various different letters which all mean different things.</para>

<para><userinput>?</userinput>: This is what <application>svn</application>
reports when svn doesn't manage a file.  Generally it means that you've
forgotten to <userinput>svn add</userinput> a file to the repository but can
also just be temporary editor files which  <application>svn</application>
doesn't know what to do with.  If it's just a temporary file, don't worry, it
won't try and commit them when you do a <userinput>svn commit</userinput>
because you haven't added them.  Instead it'll just leave them alone.</para>

<para><userinput>A</userinput>: This is a file which has been scheduled to be
added to the repository with a <userinput>svn add</userinput> but has not yet
been committed.  When you're ready to commit it, simply do a <userinput>svn
commit</userinput> on it (and don't forget that nearly all svn operations can
be performed on as many files at once as you like; indeed, if you specify no
file, it'll either give you an error (if it doesn't make sense; like with
<userinput>svn add</userinput> or <userinput>delete</userinput>) or simply
perform the action on all files from that directory downwards in the tree; for
example with <userinput>svn commit</userinput>).</para>

<para><userinput>D</userinput>: This is a file which has been removed from the
repository using <userinput>svn delete</userinput> but has not yet been
committed.  The equivalent of 'A' for added files.</para>

<para><userinput>C</userinput>:  This means that you have made local changes
but at the same time someone has made remote changes which can't be
automatically merged with yours.  You will have to go through the files and
sort the conflict out yourself.  Due to the nature of the BLFS book, this
doesn't happen very often.  One way to fix this problem is to do a 
<userinput>svn update</userinput> (abbreviated as <userinput>svn up</userinput>)
and check the file for conflict markers in the file.  
</para>

<para><userinput>*</userinput>: An asterisk in column eight means that the file
in the repository has been changed.  The file will be updated when a 
<userinput>svn update</userinput> is run.</para>

<para>Once you know why you're getting each symbol, and they're all correct,
you can proceed to the next step.  There are other symbols that are not
normally encountered.  They are explained in more detail at <ulink
url="http://svnbook.red-bean.com/svnbook/book.html#svn-ch-3-sect-4.4.1"/></para>

</section>

<section id="ch04-checkrender">
<title>Check that the book validates and renders properly</title>

<para>Before committing any changes, it's important to check that you have all
the syntax correct and that the book can actually pass through
<userinput>xsltproc</userinput> without making it belch.  Instructions on how
to render the book can be found in the <filename>INSTALL</filename> and
<filename>README</filename> files in the BOOK directory, but generally you can
just run <command>make validate</command> from the BOOK directory to do a
complete syntax check and a simple <command>make</command> to render the book
on your local system.  </para>

</section>

<section id="ch04-commit">
<title>Commit it!</title>

<para>Before you actually commit, spend a few seconds thinking about the
comment you are going to add.  As mentioned in the section on <application>svn</application>
commands, comments should <emphasis>always</emphasis> be used when
committing changes.  Even if the comment is just 'small typo fix', that'll
do.  Other usual comments are 'update to package-x.y.z' or 'add new
section BLAH'.</para>

<para>To commit, you use the <userinput>svn commit</userinput> or
<userinput>svn ci</userinput> command.  A good example of a commit
command could be:

<screen><userinput>svn ci -m "add new package baldrick" index.xml \
introduction/welcome/changelog.xml introduction/welcome/credits.xml \
postlfs/postlfs.xml postlfs/config/baldrick/baldrick*.xml</userinput></screen>

If you have only made the changes regarding this package to your tree,
then you can save time by simply running:

<screen><userinput>svn ci -m "add new package baldrick"</userinput></screen>

from the root of your local BLFS sandbox.  The first command is more
useful when you've modified files you don't want to commit yet.</para>

</section>

<section id="ch04-bugzilla">
<title>Update bugzilla</title>

<para>The final part of updating the book is to update bugzilla.
This is usually as easy as going to BLFS
Bugzilla (<ulink url="&blfs-bugzilla;"/>), going to the bug and
choosing Resolve bug, changing resolution to FIXED.  Note that you
should <emphasis>not</emphasis> then go back and CLOSE or VERIFY the bug.  The
person who VERIFYs the bug should be a different editor who has tested
that what the bug is about has been fixed.  Basically, it's our QA
process. A bug is CLOSEd when a new version of the book is released.</para>

<para>Having completed all of this, you can now go and have a rest.
Well done, thank you and good night.</para>

</section>


</chapter>

