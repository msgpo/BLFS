<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY gdb-download-http "https://ftp.gnu.org/gnu/gdb/gdb-&gdb-version;.tar.xz">
  <!ENTITY gdb-download-ftp  "ftp://ftp.gnu.org/gnu/gdb/gdb-&gdb-version;.tar.xz">
  <!ENTITY gdb-md5sum        "2a35bac41fa8e10bf04f3a0dd7f7f363">
  <!ENTITY gdb-size          "18 MB">
  <!ENTITY gdb-buildsize     "580 MB (with the test suite)">
  <!ENTITY gdb-time          "11.4 SBU (with the test suite)">
]>

<sect1 id="gdb" xreflabel="GDB-&gdb-version;">
  <?dbhtml filename="gdb.html"?>

  <sect1info>
    <othername>$LastChangedBy$</othername>
    <date>$Date$</date>
  </sect1info>

  <title>GDB-&gdb-version;</title>

  <indexterm zone="gdb">
    <primary sortas="a-GDB">GDB</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to GDB</title>

    <para>
      <application>GDB</application>, the GNU Project debugger, allows you
      to see what is going on <quote>inside</quote> another program while it
      executes -- or what another program was doing at the moment it crashed.
      Note that <application>GDB</application> is most effective when tracing
      programs and libraries that were built with debugging symbols and not
      stripped.
    </para>

    &lfs78_checked;

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Download (HTTP): <ulink url="&gdb-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&gdb-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &gdb-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &gdb-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &gdb-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &gdb-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">GDB Dependencies</bridgehead>

    <bridgehead renderas="sect4">Optional</bridgehead>
    <para role="optional">
      <xref linkend="dejagnu"/> (for tests),
      <xref linkend="doxygen"/>,
      <xref linkend="guile"/>,
      <xref linkend="python2"/>, and
      <ulink url="http://sourceware.org/systemtap">SystemTap (optional runtime
      dependency, also used in a few tests)</ulink>.
    </para>

    <para condition="html" role="usernotes">User Notes:
      <ulink url="&blfs-wiki;/gdb"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation of GDB</title>

    <para>
      Install <application>GDB</application> by running the following
      commands:
    </para>

<screen><userinput>./configure --prefix=/usr --with-system-readline &amp;&amp;
make</userinput></screen>

    <para>
      Optionally, to build the API documentation using
      <xref linkend="doxygen"/>, run:
    </para>

<screen><userinput>make -C gdb/doc doxy</userinput></screen>

    <para>
      To run the test suite, issue the following commands:
    </para>

<screen><userinput>pushd gdb/testsuite &amp;&amp;
make     site.exp &amp;&amp;
echo "set gdb_test_timeout 120" >> site.exp &amp;&amp;
runtest TRANSCRIPT=y
popd</userinput></screen>

    <para>
      There are many problems with the test suite. Your results will depend on 
      installed compilers, as well as whether or not you are running it locally
      or remotely. Although we do extend the timeout above, there are still many
      tests that will time out. Note that by changing the timeout value, the 
      number of tests is no longer conserved. There are also failures associated
      with system readline 6.x among others. Unexpected failures should be about
      0.5%.
    </para>

    <para>
      Now, as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>make -C gdb install</userinput></screen>

    <para>
      If you have built the API documentation, it is now in gdb/doc/doxy.
      You can install it (as the <systemitem class="username">root</systemitem>
      user):
    </para>

<screen role="root"><userinput>install -d /usr/share/doc/gdb-&gdb-version; &amp;&amp;
rm -rf gdb/doc/doxy/xml &amp;&amp;
cp -Rv gdb/doc/doxy /usr/share/doc/gdb-&gdb-version;</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Library</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>
          gcore, gdb and gdbserver
        </seg>
        <seg>
          libinproctrace.so
        </seg>
        <seg>
          /usr/include/gdb and
          /usr/share/gdb
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="gcore">
        <term><command>gcore</command></term>
        <listitem>
          <para>
            generates a core dump of a running program.
          </para>
          <indexterm zone="gdb gcore">
            <primary sortas="b-gcore">gcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gdb-prog">
        <term><command>gdb</command></term>
        <listitem>
          <para>
            is the GNU Debugger.
          </para>
          <indexterm zone="gdb gdb-prog">
            <primary sortas="b-gdb-prog">gdb-prog</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gdbserver">
        <term><command>gdbserver</command></term>
        <listitem>
          <para>
            is a remote server for the GNU debugger (it allows programs
            to be debugged from a different machine).
          </para>
          <indexterm zone="gdb gdbserver">
            <primary sortas="b-gdbserver">gdbserver</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libinproctrace">
        <term><filename class="libraryfile">libinproctrace.so</filename></term>
        <listitem>
          <para>
            contains functions for the in-process tracing agent. The agent
            allows for installing fast tracepoints, listing static tracepoint
            markers, probing static tracepoints markers, and starting trace
            monitoring.
          </para>
          <indexterm zone="gdb libinproctrace">
            <primary sortas="c-libinproctrace">libinproctrace.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
